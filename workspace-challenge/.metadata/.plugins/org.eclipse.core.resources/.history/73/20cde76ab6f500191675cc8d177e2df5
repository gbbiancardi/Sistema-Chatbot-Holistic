package br.com.holistic.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import br.com.holistic.beans.Usuario;
import br.com.holistic.conexao.Conexao;

/**
 * Classe responsavel por Estabeler a Conexao com o Banco de Dados entre ProfessorDAO e Conexao
 * CD_PROFESSOR ,NR_SENHA,NM_PROFESSOR,DT_NASCIMENTO,DS_GENERO,DS_EMAIL,NR_CPF
 * CD_PROFESSOR = PK
 * @author Holistic
 * @version 00.001
 * @see br.com.holistic.dao
 */
public class ProfessorDAO {
	private Connection con;
	private PreparedStatement stmt;
	private ResultSet rs;
	
	/**
	 * Metodo que estabelece conexao entre o ProfessorDAO e Conexao.
	 * @author Holistic
	 * @param 
	 * @return 
	 * @throws Exception
	 * 	 
	 */
	public ProfessorDAO() throws Exception{
		con = Conexao.getConnectar();
	}
	
	/**
	 * Metodo que Cadastra um novo Professor no Banco de Dados
	 * @author Holistic
	 * @param new Usuario
	 * @return executeUpdate
	 * @throws Exception
	 * 	 
	 */
	public int addProfessor(Usuario u) throws Exception{
		
		stmt = con.prepareStatement("INSERT INTO T_SCB_PROFESSOR(CD_PROFESSOR ,NR_SENHA,NM_PROFESSOR,DT_NASCIMENTO,DS_GENERO,DS_EMAIL,NR_CPF)VALUES(?,?,?,?,?,?,?)");
		
		stmt.setString(1, "P" + u.getCodigo());
		stmt.setString(2, u.getSenha());
		stmt.setString(3, u.getNome());
		stmt.setString(4, u.getDataNascimento());
		stmt.setString(5, u.getGenero());
		stmt.setString(6, u.getEmail());
		stmt.setString(7, u.getCpf());
		
		return stmt.executeUpdate();
	}
	
	/**
	 * Metodo que vizualiza um Professor em especifico que esteja logado
	 * @author Holistic
	 * @param codigo, senha
	 * @return new Usuario
	 * @throws Exception
	 * 	 
	 */
	public Usuario getProfessor(String codigo, String senha) throws Exception {
		
		stmt = con.prepareStatement("SELECT * FROM T_SCB_PROFESSOR where CD_PROFESSOR=? and NR_SENHA=?");
		stmt.setString(1, codigo);
		stmt.setString(2, senha);
		
		rs =stmt.executeQuery();
					
		if(rs.next()) {
							
			return 
					new Usuario(
					rs.getString("CD_PROFESSOR"),
					rs.getString("NR_SENHA"),
					rs.getString("NM_PROFESSOR"), 
					rs.getString("DT_NASCIMENTO"),
					rs.getString("DS_GENERO"), 
					rs.getString("DS_EMAIL"),
					rs.getString("NR_CPF"));
				
		}else {
			return null;
		}
	}
	
	/**
	 * Metodo que vizualiza um Professor em especifico cadastrado
	 * @author Holistic
	 * @param codigo
	 * @return new Usuario
	 * @throws Exception
	 * 	 
	 */
	public Usuario getProfessors(String codigo) throws Exception {
			
			stmt = con.prepareStatement("SELECT * FROM T_SCB_PROFESSOR where CD_PROFESSOR=?");
			stmt.setString(1, codigo);
			
			
			rs =stmt.executeQuery();
						
			if(rs.next()) {
					
				Usuario u = new Usuario();
				u.setCodigo(rs.getString("CD_PROFESSOR"));
				u.setSenha(rs.getString("NR_SENHA"));
				u.setNome(rs.getString("NM_PROFESSOR"));
				u.setDataNascimento(rs.getString("DT_NASCIMENTO"));
				u.setGenero(rs.getString("DS_GENERO"));
				u.setEmail(rs.getString("DS_EMAIL"));
				u.setCpf(rs.getString("NR_CPF"));
				
				con.close();
				return u; 
					
			}else {
				con.close();
				return null;
			}
			
	}
	
	/**
	 * Metodo responsavel por Fechar a conexao com o Banco de Dados
	 * @author Holistic
	 * @param 
	 * @return 
	 * @throws Exception
	 * 	 
	 */
	public void fechar() throws Exception{
		con.close();
	}
		
}
